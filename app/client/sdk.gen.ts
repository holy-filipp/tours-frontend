// This file is auto-generated by @hey-api/openapi-ts

import { type Client, formDataBodySerializer, type Options as Options2, type TDataShape } from './client';
import { client } from './client.gen';
import type { B3A9Db44Be281C210Db1Dc5686205879Data, B3A9Db44Be281C210Db1Dc5686205879Errors, B3A9Db44Be281C210Db1Dc5686205879Responses, B5A8E97C01De37E7F49653dData, B5A8E97C01De37E7F49653dErrors, B5A8E97C01De37E7F49653dResponses, Be28363C04C1Cd7C100107417E944C1Data, Be28363C04C1Cd7C100107417E944C1Errors, Be28363C04C1Cd7C100107417E944C1Responses, Bedf832894D55C9C5A4693541B0B2A5Data, Bedf832894D55C9C5A4693541B0B2A5Errors, Bedf832894D55C9C5A4693541B0B2A5Responses, D872D3E3A28C31D4C30C076F70E11D7Data, D872D3E3A28C31D4C30C076F70E11D7Errors, D872D3E3A28C31D4C30C076F70E11D7Responses, E55709238E32Fe7D749B26E30Data, E55709238E32Fe7D749B26E30Errors, E55709238E32Fe7D749B26E30Responses, Ffba1E96F748Cd3857A2B9482Cef3EbData, Ffba1E96F748Cd3857A2B9482Cef3EbErrors, Ffba1E96F748Cd3857A2B9482Cef3EbResponses, GetCsrfCookieData, GetCsrfCookieResponses, GetUserData, GetUserErrors, GetUserResponses, SigninData, SigninErrors, SigninResponses, SignupData, SignupErrors, SignupResponses } from './types.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = Options2<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Получить CSRF токен
 *
 * Генерирует и возвращает в XSRF-TOKEN cookie новый CSRF токен
 */
export const getCsrfCookie = <ThrowOnError extends boolean = false>(options?: Options<GetCsrfCookieData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCsrfCookieResponses, unknown, ThrowOnError>({
        url: '/api/sanctum/csrf-cookie',
        ...options
    });
};

/**
 * Создать новую достопримечательность
 *
 * Создаёт и возвращает новую достопримечательность в случае успеха
 */
export const b3A9Db44Be281C210Db1Dc5686205879 = <ThrowOnError extends boolean = false>(options: Options<B3A9Db44Be281C210Db1Dc5686205879Data, ThrowOnError>) => {
    return (options.client ?? client).post<B3A9Db44Be281C210Db1Dc5686205879Responses, B3A9Db44Be281C210Db1Dc5686205879Errors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/poi/create',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Получить список достопримечательностей
 *
 * Возвращает список всех достопримечательностей
 */
export const e55709238E32Fe7D749B26E30 = <ThrowOnError extends boolean = false>(options?: Options<E55709238E32Fe7D749B26E30Data, ThrowOnError>) => {
    return (options?.client ?? client).get<E55709238E32Fe7D749B26E30Responses, E55709238E32Fe7D749B26E30Errors, ThrowOnError>({
        url: '/api/poi/list',
        ...options
    });
};

/**
 * Контент по Удмуртии
 *
 * Возвращает статический контент в формате markdown для страницы
 */
export const b5A8E97C01De37E7F49653D = <ThrowOnError extends boolean = false>(options?: Options<B5A8E97C01De37E7F49653dData, ThrowOnError>) => {
    return (options?.client ?? client).get<B5A8E97C01De37E7F49653dResponses, B5A8E97C01De37E7F49653dErrors, ThrowOnError>({
        url: '/api/content/udmurtia',
        ...options
    });
};

/**
 * Загрузить картинку для точки
 *
 * Загружает картинку для точки и возвращает её путь в случае успеха
 */
export const ffba1E96F748Cd3857A2B9482Cef3Eb = <ThrowOnError extends boolean = false>(options: Options<Ffba1E96F748Cd3857A2B9482Cef3EbData, ThrowOnError>) => {
    return (options.client ?? client).post<Ffba1E96F748Cd3857A2B9482Cef3EbResponses, Ffba1E96F748Cd3857A2B9482Cef3EbErrors, ThrowOnError>({
        ...formDataBodySerializer,
        url: '/api/trip/image',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};

/**
 * Создать экскурсию, маршрут и точки
 *
 * Создаёт и возвращает новую экскурсию, маршрут и привязанные к нему точки. Всё в одном запросе
 */
export const d872D3E3A28C31D4C30C076F70E11D7 = <ThrowOnError extends boolean = false>(options?: Options<D872D3E3A28C31D4C30C076F70E11D7Data, ThrowOnError>) => {
    return (options?.client ?? client).post<D872D3E3A28C31D4C30C076F70E11D7Responses, D872D3E3A28C31D4C30C076F70E11D7Errors, ThrowOnError>({
        url: '/api/trip/complex',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Получить все экскурсии
 *
 * Запрос для получения списка всех экскурсий вместе с точками и маршрутами (пагинация лень пока)
 */
export const be28363C04C1Cd7C100107417E944C1 = <ThrowOnError extends boolean = false>(options?: Options<Be28363C04C1Cd7C100107417E944C1Data, ThrowOnError>) => {
    return (options?.client ?? client).get<Be28363C04C1Cd7C100107417E944C1Responses, Be28363C04C1Cd7C100107417E944C1Errors, ThrowOnError>({
        url: '/api/trip/list',
        ...options
    });
};

/**
 * Поиск по экскурсиям, точкам и маршрутам
 *
 * Запрос для поиска по всем маршрутам, точкам и экскурсиям. Ищет в полях description, name и start_location
 */
export const bedf832894D55C9C5A4693541B0B2A5 = <ThrowOnError extends boolean = false>(options: Options<Bedf832894D55C9C5A4693541B0B2A5Data, ThrowOnError>) => {
    return (options.client ?? client).get<Bedf832894D55C9C5A4693541B0B2A5Responses, Bedf832894D55C9C5A4693541B0B2A5Errors, ThrowOnError>({
        url: '/api/trip/search',
        ...options
    });
};

/**
 * Зарегистрировать нового пользователя
 *
 * Создаёт и возвращает нового пользователя в случае успеха
 */
export const signup = <ThrowOnError extends boolean = false>(options?: Options<SignupData, ThrowOnError>) => {
    return (options?.client ?? client).post<SignupResponses, SignupErrors, ThrowOnError>({
        url: '/api/user/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Войти в аккаунт
 *
 * Проверяет credentials и создаёт новый токен в случае успеха
 */
export const signin = <ThrowOnError extends boolean = false>(options?: Options<SigninData, ThrowOnError>) => {
    return (options?.client ?? client).post<SigninResponses, SigninErrors, ThrowOnError>({
        url: '/api/user/signin',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Получить пользователя по сессии
 *
 * Возвращает пользователя из сессии если это возможно
 */
export const getUser = <ThrowOnError extends boolean = false>(options?: Options<GetUserData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetUserResponses, GetUserErrors, ThrowOnError>({
        url: '/api/user/me',
        ...options
    });
};
